
TODAY
14/02/2024
I ll let u know if i m goibg
19:48
Going*
19:48
15/02/2024
Hi
18:57
Hows it going?
18:57
Hey
19:02
Just at tamk
19:02
Doing assignment
19:02
Ah yes yes
19:04
21/02/2024
Google Calendar - Easier Time Management, Appointments & Scheduling
Learn how Google Calendar helps you stay on top of your plans - at home, at work and everywhere in between.
calendar.google.com
https://calendar.google.com/calendar/embed?src=tamkparvi%40gmail.com&ctz=Europe%2FHelsinki
16:59
Somos Finlandia ðŸ‡«ðŸ‡® on Instagram: "Kind of a culture shock coming from a Latino countryðŸ˜… Question: in your home country, do you share good with guests?? #europe #stats #sharing #is #caring #istillloveyoufinland #imageby @gozhda_stats"
614 likes, 92 comments - somosfinlandia on February 19, 2024: "Kind of a culture shock coming from a Latino countryðŸ˜… Question: in your home country, do you ..."
www.instagram.com
https://www.instagram.com/p/C3h7zOVNMlC/?igsh=MTRnMnJwNDRxZnhvcg==
17:02
Add me as a friend on Discord! Invite expires in 1 week: https://discord.com/invite/UwujafAk
17:18
TODAY
Forwarded
#include <Wire.h>
#include <LiquidCrystal.h>
#include <LIDARLite.h>
#include <EEPROM.h>

LIDARLite myLidarLite;
LiquidCrystal lcd(37, 36, 35, 34, 33, 32);

const int encoderBPin = 2;
const int encoderAPin = 3;
const int joyStick = 19;
const int potPin = A5;


#define Motor_forward 0  // Define Motor forward state
#define Motor_return 1   // Define Motor return state
#define Motor_L_dir_pin 7
#define Motor_R_dir_pin 8
#define Motor_L_pwm_pin 9
#define Motor_R_pwm_pin 10
#define CMPS14_address 0x60
#define Joystick_X_PIN A8
#define Joystick_Y_PIN A9

volatile long encoderCount = 0;
volatile long accuEncoderCount = 0;
volatile long accuDistance = 0;
volatile unsigned long lastDebounceTime = 0;
const unsigned long debounceDelay = 50;
volatile bool isTrue = true;

const int lcdMinValue = 2;
const int lcdMaxValue = 21;

int initDist = 0;
int afterDist = 0;
int distance = 0;
long defArea = 0;
long defVolume = 0;
int fixedDistance = 0;
int currentDist = 0;
String direction = "";
void setup() {
  Serial.begin(9600);

  lcd.begin(20, 4);
  Wire.begin();
  Wire.beginTransmission(CMPS14_address);
  Wire.write(1);
  Wire.endTransmission();

  pinMode(Motor_L_dir_pin, OUTPUT);
  pinMode(Motor_R_dir_pin, OUTPUT);
  pinMode(Motor_L_pwm_pin, OUTPUT);
  pinMode(Motor_R_pwm_pin, OUTPUT);
  pinMode(joyStick, INPUT_PULLUP);

  attachInterrupt(digitalPinToInterrupt(encoderBPin), handleEncoder, RISING);
  attachInterrupt(digitalPinToInterrupt(encoderAPin), handleEncoder, RISING);
  attachInterrupt(digitalPinToInterrupt(joyStick), buttonISR, FALLING);

  // initDist = getDistance();
  initDist = getDistance();
}

void loop() {
  // Read Compass Bearing and Convert to Direction
  int bearing = readCompassBearing();
  direction = bearingToDirection(bearing);
  currentDist = myLidarLite.distance();

  // Read the value from the potentiometer
  int defPotValue = analogRead(potPin);

  // Map the potentiometer value to the new range (2 to 20)
  fixedDistance = map(defPotValue, 0, 1024, lcdMinValue, lcdMaxValue);
  // Serial.println("Fixed Distance: ");
  // Serial.println(fixedDistance);

  // Update LCD only if there's a change in direction
  static String lastDirection = "";
  if (direction != lastDirection) {
    lastDirection = direction;
  }
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Dir: ");
  lcd.print(direction);

  lcd.setCursor(0, 1);
  lcd.print("Pulses: ");
  lcd.print(accuEncoderCount);

  lcd.setCursor(0, 2);
  lcd.print("Distance: ");
  lcd.print(accuDistance);

  lcd.setCursor(0, 3);
  // lcd.print("Lidar Dist: ");
  // lcd.print(calculateDrivenDistance());
  lcd.print("Current Dist: ");
  lcd.print(myLidarLite.distance());
  // calculateDrivenDistance();
  // Joystick Control
  if (isTrue) {
    // Serial.println("Switched to JoyStick Mode");
    controlWithJoyStick();
  }
  // Monitor Control
  else {
    // Serial.println("Switched to Monitor Mode");
    controlWithMonitor();
  }
  // followObject();
  // Serial.println("Pot value:");
  // Serial.println(fixedDistance);
}

// Toggle between controlling the car with the joystick and with the monitor
void buttonISR() {
  unsigned long currentMillis = millis();
  if (currentMillis - lastDebounceTime >= debounceDelay) {
    lastDebounceTime = currentMillis;
    int buttonReading = digitalRead(joyStick);

    if (buttonReading == LOW) {
      isTrue = !isTrue;

      // Print the button state (for debugging purposes)
      Serial.println(isTrue ? "Button pressed" : "Button released");
    }
    if (isTrue) {
      encoderCount = accuEncoderCount;
    }
  }
}

// Move the car forward
void goForward(int speed) {
  digitalWrite(Motor_L_dir_pin, Motor_forward);
  digitalWrite(Motor_R_dir_pin, Motor_forward);
  analogWrite(Motor_L_pwm_pin, speed);
  analogWrite(Motor_R_pwm_pin, speed);
}

// Move the car backward
void goBackward(â€¦ Read more
15:04


